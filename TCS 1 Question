// Source code is decompiled from a .class file using FernFlower decompiler.
import java.util.Scanner;

class tcsquestion {
   tcsquestion() {
   }

   public static void main(String[] var0) {
      new Scanner(System.in);
      int[][] var10000 = new int[][]{{11, 20}, {30, 40}, {5, 10}, {40, 30}, {10, 5}};
      int[] var3 = new int[]{-7, 1, 5, 2, -4, 3, 0};
      int[] var6 = new int[]{2, 3, 6};
      boolean var5 = true;
      System.out.println(Equilibrium(var3));
   }

   static int count(int[][] var0) {
      int var1 = 0;
      int var2 = 0;

      for(int var3 = 0; var3 < var0.length; ++var3) {
         int var4 = 0;

         for(int var5 = 0; var5 < var0.length; ++var5) {
            if (var0[var3][var5] == 1) {
               ++var4;
            }

            if (var4 > var1) {
               var1 = var4;
               var2 = var3;
            }
         }
      }

      return var2;
   }

   static int countchar(String var0, String var1) {
      int var2 = 0;
      char[] var3 = var0.toCharArray();
      int var4 = var3.length;

      for(int var5 = 0; var5 < var4; ++var5) {
         char var6 = var3[var5];
         char[] var7 = var1.toCharArray();
         int var8 = var7.length;

         for(int var9 = 0; var9 < var8; ++var9) {
            char var10 = var7[var9];
            if (var6 == var10) {
               ++var2;
            }
         }
      }

      return var2;
   }

   static boolean goodnumber(int var0) {
      int var1 = 0;

      for(int var2 = var0; var2 > 0; var2 /= 10) {
         int var3 = var2 % 10;
         var1 += var3;
      }

      return var0 % var1 == 0;
   }

   static int[] moveZeroToLastPlace(int[] var0) {
      int[] var1 = new int[var0.length];
      int var2 = 0;
      int var3 = 0;

      for(int var4 = 0; var4 < var0.length; ++var4) {
         if (var0[var4] != 0) {
            var1[var3] = var0[var4];
            ++var2;
            ++var3;
         }
      }

      return var1;
   }

   static int repreatingnumber(int[] var0) {
      for(int var1 = 0; var1 < var0.length; ++var1) {
         boolean var2 = false;

         for(int var3 = 0; var3 < var0.length; ++var3) {
            if (var1 != var3 && var0[var1] == var0[var3]) {
               var2 = true;
               break;
            }
         }

         if (!var2) {
            return var0[var1];
         }
      }

      return -1;
   }

   static int[] rotationarray(int[] var0, int var1) {
      for(int var2 = 1; var2 <= var1; ++var2) {
         for(int var3 = 0; var3 < var0.length - 1; ++var3) {
            int var4 = var0.length - 1;
            var0[var3 + 1] = var0[var3];
            var0[1] = var4;
         }
      }

      return var0;
   }

   static int[] rightRotation(int[] var0, int var1) {
      int var2 = var0.length;
      int[] var3 = new int[var2];

      int var4;
      for(var4 = 0; var4 < var1; ++var4) {
         var3[var4] = var0[var2 - var1 + var4];
      }

      for(var4 = var1; var4 < var2; ++var4) {
         var3[var4] = var0[var4 - var1];
      }

      return var3;
   }

   static boolean subset(int[] var0, int[] var1) {
      boolean var2 = false;
      int var6;
      if (var0.length > var1.length) {
         var6 = var1.length;
      } else {
         var6 = var0.length;
      }

      int var3 = 0;

      for(int var4 = 0; var4 < var0.length; ++var4) {
         for(int var5 = 0; var5 < var1.length; ++var5) {
            if (var0[var4] == var1[var5]) {
               ++var3;
            }
         }
      }

      return var3 == var6;
   }

   static int Equilibrium(int[] var0) {
      int var1 = 0;
      int var2 = 0;

      for(int var3 = 0; var3 < var0.length; ++var3) {
         var1 += var0[var3];

         for(int var4 = var3 + 2; var4 < var0.length; ++var4) {
            int var5 = 0;
            var5 += var0[var4];
            if (var1 == var5) {
               var2 = var3;
            }
         }
      }

      return var2;
   }
}
